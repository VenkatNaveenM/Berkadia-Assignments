Advantages that compiled languages bring over interpreted languages:

Compiler and Interpreter are two different ways to execute a program written in a programming or scripting language.
A compiler takes entire program and converts it into object code which is typically stored in a file.
The object code is also refereed as binary code and can be directly executed by the machine after linking. 
Examples of compiled programming languages are C and C++.

An Interpreter directly executes instructions written in a programming or scripting language without 
previously converting them to an object code or machine code. Examples of interpreted languages are Perl, Python and Matlab.

Following are some interesting facts about interpreters and compilers.

1) Both compilers and interpreters covert source code (text files) into tokens, both may generate a parse tree,
 and both may generate immediate instructions. The basic difference is that a compiler system,
 including a (built in or separate) linker, generates a stand alone machine code program,
 while an interpreter system instead performs the actions described by the high level program.

2) Once a program is compiled, its source code is not useful for running the code. For interpreted programs,
 the source code is needed to run the program every time.

3) In general, interpreted programs run slower than the compiled programs.

4) Java programs are first compiled to an intermediate form, then interpreted by the interpreter.

Because comparing compilation and interpretation is so dependent on the specific implementation of the interpreter and compiler,
we can only compare compilation and interpretation in very general terms â€“ there will be exceptions to what we say below,
but in general these things are true:

1) Compiled implementations of languages have the advantage of being faster because they translate directly to the native code of the specific machine.
2) Interpreted implementations of languages tend to be more portable as well.
3) Interpreted implementations of languages are generally easier to create because writing compilers is difficult.