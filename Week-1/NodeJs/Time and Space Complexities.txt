1. Time Complexity:

Time complexity is a function describing the amount of time an algorithm takes in terms of the amount of input to the algorithm.
"Time" can mean the number of memory accesses performed, the number of comparisons between integers, the number of times some inner loop is executed,
or some other natural unit related to the amount of real time the algorithm will take.
We try to keep this idea of time separate from "wall clock" time,
since many factors unrelated to the algorithm itself can affect the real time (like the language used, type of computing hardware,
proficiency of the programmer, optimization in the compiler, etc.). It turns out that, if we chose the units wisely,
all of the other stuff doesn't matter and we can get an independent measure of the efficiency of the algorithm.

• Worst case time complexity:It is the function defined by the maximum amount of time needed by an algorithm for an input of size n.
• Average case time complexity:The average-case running time of an algorithm is an estimate of the running time for an "average" input.
  Computation of average-case running time entails knowing all possible input sequences, the probability distribution of occurrence of these sequences,
  and the running times for the individual sequences.
• Amortized Running Time: It is the time required to perform a sequence of (related) operations is averaged over all the operations performed.
  Amortized analysis guarantees the average performance of each operation in the worst case.
• Best case time complexity:It is the minimum amount of time that an algorithm requires for an input of size n.

2. Space Complexity:

Space complexity is a function describing the amount of memory (space) an algorithm takes in terms of the amount of input to the algorithm.
We often speak of "extra" memory needed, not counting the memory needed to store the input itself. Again,
we use natural (but fixed-length) units to measure this. We can use bytes, but it's easier to use, say, number of integers used,
number of fixed-sized structures, etc. In the end, the function we come up with will be
independent of the actual number of bytes needed to represent the unit.
Space complexity is sometimes ignored because the space used is minimal and/or obvious, but sometimes it becomes as important an issue as time.
